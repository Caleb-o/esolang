#? This is meant to be used as reference, since I am re-writing the language.
#? I would like to make my life easier with syntax and flow.

# This is a comment

# Using which is tagged with std
using 'std:eso'

# Multi using
using {
	'std:math'
	'std:strings'
}

# Constant - Since they're constant, we can infer the type
PI :: 3.14


# This is a procedure that takes two integers and returns 1
# x and y are bound with a const flag, so they cannot be overwritten
proc add_two(x, y : int) :: int {
	x y +
}

# Just like the original Eso, we can overload a procedure
proc add_two(x, y : float) :: float {
	x y +
}

# And also return multiple values
proc return_many() :: int, float, bool, string {
	1 2.3 true 'Hello'
}

# Take a string and return a string array
# In a parameter/return context, an array will be given its size at runtime
# If a size is provided, we check if the criteria is met with the parameter/return value
proc string_split(str : string) :: string[] {
	# Use a type property to print its length
	str.len println drop
	# Split with a type procedure
	str.split(' ')
}

# Main procedure - the entry point
proc main() :: void {
	# We can parse it this and also see that value and 1 are of type int
	# Here x = value, y = 2
	add_two(value, 2) println

	# We will bind value to the top value with the strict modifier
	# so we cannot overwrite value. We can be explicity with the type,
	# but can can also infer the type
	$value : strict

	'string' $str

	# Push 1, 2 and 3 then bind them to a, b, c (a=3, b= 2, a =1)
	1 2 3
	$a, b, c

	# Creating an array (with 3 integer elements) and capturing all 3 immediately
	4 5 6
	$d[3 : int](3)

	# Access the third element
	d[2] println drop

	# Overwrite a value at index 1
	3 $d[1]

	# Using other properties
	# Type - Will push the values type to the stack
	a.type println drop

	# Sizeof - Size of the internal value (Not the entire type, which is a union, just the internal - int, boolean, string etc)
	a.sizeof println drop

	# Len - Return the length of an array/string
	d.len println drop
	str.len println drop
}