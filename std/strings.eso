# Author    : Caleb
# Date      : 13th Feb 2022
# Modified  : 13th Feb 2022

# Return a lowercase version of the input string
# Parameters 	: STRING - value
# Return		: STRING - result
proc std_to_lower(str : string) -> string {
	str @str_len 0 '' bind | result, idx, len | drop
	32 strict | diff |

	true loop {
		str idx @str_index @to_bytes bind | byte |

		byte 65 >= byte 90 <= and if {
			result byte diff + 1 @from_bytes + bind | result |
		} drop

		byte 97 >= byte 122 <= and if {
			result byte 1 @from_bytes + bind | result |
		}

		idx 1 + bind | idx |
		idx len <
	}

	result
}

# Return a upper version of the input string
# Parameters 	: STRING - value
# Return		: STRING - result
proc std_to_upper(str : string) -> string {
	str @str_len 0 '' bind | result, idx, len | drop
	32 strict | diff |

	true loop {
		str idx @str_index @to_bytes bind | byte |

		byte 65 >= byte 90 <= and if {
			result byte 1 @from_bytes + bind | result |
		} drop
			
		byte 97 >= byte 122 <= and if {
			result byte diff - 1 @from_bytes + bind | result |
		}

		idx 1 + bind | idx |
		idx len <
	}

	result
}

# Wraps the native @str_cmp and provides a boolean
# Parameters	: STRING, STRING - src1, src2
# Return		: BOOL - result
proc std_str_cmp(str_a, str_b : string) -> bool {
	str_a str_b @str_cmp bind | ret | 2 @drop_n ret
}

# Wraps the native @stoi and provides an integer
# Parameters	: STRING - src
# Return		: INT - value (0 default)
proc std_stoi(str : string) -> int {
	str @stoi bind | value | drop

	# Create a default int
	value true @kind_cmp if {
		# Drop both boolean values
		# true + false generated by a bad stoi
		# Return 0 as default
		2 @drop_n 0
	} else { 
		# Drop the true
		drop 
	}
}

# Wraps the native @stof and provides a float
# Parameters	: STRING - src
# Return		: FLOAT - value (0 default)
proc std_stof(str : string) -> float {
	str @stof bind | value | drop

	# Create a default float
	value true @kind_cmp if {
		# Drop both boolean values
		# true + false generated by a bad stof
		# Return 0 as default
		2 @drop_n 0.0
	} else { 
		# Drop the true
		drop 
	}
}